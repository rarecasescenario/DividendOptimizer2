plugins {
	id 'java'
	id 'war'
	id 'org.springframework.boot' version '3.1.0'
	id 'io.spring.dependency-management' version '1.1.0'
}

group = 'com.stock'
version = '0.0.1-SNAPSHOT'

java {
	sourceCompatibility = '17'
}

//repositories {
//	mavenCentral()
//}

configurations.all {
    exclude group: 'ch.qos.logback', module: 'logback-classic'
}

//configurations { 
//	compile.exclude group:"org.springframework.boot", module: 'spring-boot-starter-logging' 
//}


//configurations {
//    compile.exclude module: 'spring-boot-starter-logging'
//}

//configurations { 
//	compile.exclude group:"org.springframework.boot", module: 'spring-boot-starter-logging' 
//}

dependencies {
    implementation "org.springframework.boot:spring-boot-starter-log4j2"
    modules {
        module("org.springframework.boot:spring-boot-starter-logging") {
            replacedBy("org.springframework.boot:spring-boot-starter-log4j2", "Use Log4j2 instead of Logback")
        }
    }
    
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-data-rest'
//	implementation 'org.springframework.boot:spring-boot-starter-web' {
	
	implementation('org.springframework.boot:spring-boot-starter-web') {
       exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'  
    }
    implementation('org.springframework.boot:spring-boot-starter-log4j2')
    
//	compile("org.springframework.boot:spring-boot-starter-log4j2")
	
//	implementation group: 'org.springframework.boot', name: 'spring-boot-starter-logging'
//	implementation group: 'org.springframework.boot', name: 'spring-boot-starter-log4j2'
//	implementation group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.17.1'
//	implementation group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.17.1'
//	implementation group: 'org.apache.logging.log4j', name: 'log4j-slf4j-impl', version: '2.17.1'
//	developmentOnly 'org.springframework.boot:spring-boot-devtools'
//	runtimeOnly 'com.mysql:mysql-connector-j'
	implementation 'com.mysql:mysql-connector-j'
//	providedRuntime 'org.springframework.boot:spring-boot-starter-tomcat'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation group: 'org.mockito', name: 'mockito-core', version: '5.4.0'
}
jar {
	archiveFileName = "divoptimizer2.jar"
	destinationDirectory = file("${project.rootDir}/Optimizer/build/libs")
	manifest {
		attributes(
			'Build-By'			: System.properties['user.name'],
			'Build-Timestamp'	: new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss").format(new Date()),
			'Created-By'		: "Gradle ${gradle.gradleVersion}",
			'Build-Jdk'			: "${System.properties['java.version']} (${System.properties['java.vendor']} ${System.properties['java.vm.version']})",
			'Build-OS'			: "${System.properties['os.name']} ${System.properties['os.arch']} ${System.properties['os.version']}",
			'Main-Class'        : "com.stock.DivindendOptimizer2Application",
			'Implementation-Vendor' : "RareCase Corp",
			'Implementation-Title' : "Dividend Optimizer 2",
			'Version' : "${archiveVersion}",
			'Specification-Title' : "${archiveFileName}",
			//'Class-Path': configurations.runtimeClasspath.files.collect {it.getName()}.join(' ')
		)
	}
	from('resources') {
		include 'log4j2.xml'
	}
	//duplicatesStrategy = DuplicatesStrategy.EXCLUDE
	//duplicatesStrategy = DuplicatesStrategy.INCLUDE
}

tasks.named('test') {
	useJUnitPlatform()
}
